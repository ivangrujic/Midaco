
#include <iostream>
#include "midaco.h"
#include "MMath.h"



double rollTarget = 1;
double pitchTarget = -0.5;
double yawTarget = 2;

// Array declarations

double f[3][1] = { 10,5,2 };

double dx[6][1] = { 0.0001, 0.0100, -0.0001, -0.0100, 0.0000, 0.0020 };
double y[3][1] = { 0.5, 1, 1.5 };

double IqTnQ[90][6] = { { 1, 0.01, 0, 0, 0, 0 },{ 0, 0, 1, 0.01, 0, 0 },{ 0, 0, 0, 0, 1, 0.01 },{ 2, 0.03, 0, 0, 0, 0 },{ 0, 0, 2, 0.03, 0, 0 },{ 0, 0, 0, 0, 2, 0.03 },{ 3, 0.06, 0, 0, 0, 0 },{ 0, 0, 3, 0.06, 0, 0 },{ 0, 0, 0, 0, 3, 0.06 },{ 4, 0.1, 0, 0, 0, 0 },{ 0, 0, 4, 0.1, 0, 0 },{ 0, 0, 0, 0, 4, 0.1 },{ 5, 0.15, 0, 0, 0, 0 },{ 0, 0, 5, 0.15, 0, 0 },{ 0, 0, 0, 0, 5, 0.15 },{ 6, 0.21, 0, 0, 0, 0 },{ 0, 0, 6, 0.21, 0, 0 },{ 0, 0, 0, 0, 6, 0.21 },{ 7, 0.28, 0, 0, 0, 0 },{ 0, 0, 7, 0.28, 0, 0 },{ 0, 0, 0, 0, 7, 0.28 },{ 8, 0.36, 0, 0, 0, 0 },{ 0, 0, 8, 0.36, 0, 0 },{ 0, 0, 0, 0, 8, 0.36 },{ 9, 0.45, 0, 0, 0, 0 },{ 0, 0, 9, 0.45, 0, 0 },{ 0, 0, 0, 0, 9, 0.45 },{ 10, 0.55, 0, 0, 0, 0 },{ 0, 0, 10, 0.55, 0, 0 },{ 0, 0, 0, 0, 10, 0.55 },{ 11, 0.66, 0, 0, 0, 0 },{ 0, 0, 11, 0.66, 0, 0 },{ 0, 0, 0, 0, 11, 0.66 },{ 12, 0.78, 0, 0, 0, 0 },{ 0, 0, 12, 0.78, 0, 0 },{ 0, 0, 0, 0, 12, 0.78 },{ 13, 0.91, 0, 0, 0, 0 },{ 0, 0, 13, 0.91, 0, 0 },{ 0, 0, 0, 0, 13, 0.91 },{ 14, 1.05, 0, 0, 0, 0 },{ 0, 0, 14, 1.05, 0, 0 },{ 0, 0, 0, 0, 14, 1.05 },{ 15, 1.2, 0, 0, 0, 0 },{ 0, 0, 15, 1.2, 0, 0 },{ 0, 0, 0, 0, 15, 1.2 },{ 16, 1.36, 0, 0, 0, 0 },{ 0, 0, 16, 1.36, 0, 0 },{ 0, 0, 0, 0, 16, 1.36 },{ 17, 1.53, 0, 0, 0, 0 },{ 0, 0, 17, 1.53, 0, 0 },{ 0, 0, 0, 0, 17, 1.53 },{ 18, 1.71, 0, 0, 0, 0 },{ 0, 0, 18, 1.71, 0, 0 },{ 0, 0, 0, 0, 18, 1.71 },{ 19, 1.9, 0, 0, 0, 0 },{ 0, 0, 19, 1.9, 0, 0 },{ 0, 0, 0, 0, 19, 1.9 },{ 20, 2.1, 0, 0, 0, 0 },{ 0, 0, 20, 2.1, 0, 0 },{ 0, 0, 0, 0, 20, 2.1 },{ 21, 2.31, 0, 0, 0, 0 },{ 0, 0, 21, 2.31, 0, 0 },{ 0, 0, 0, 0, 21, 2.31 },{ 22, 2.53, 0, 0, 0, 0 },{ 0, 0, 22, 2.53, 0, 0 },{ 0, 0, 0, 0, 22, 2.53 },{ 23, 2.76, 0, 0, 0, 0 },{ 0, 0, 23, 2.76, 0, 0 },{ 0, 0, 0, 0, 23, 2.76 },{ 24, 3, 0, 0, 0, 0 },{ 0, 0, 24, 3, 0, 0 },{ 0, 0, 0, 0, 24, 3 },{ 25, 3.25, 0, 0, 0, 0 },{ 0, 0, 25, 3.25, 0, 0 },{ 0, 0, 0, 0, 25, 3.25 },{ 26, 3.51, 0, 0, 0, 0 },{ 0, 0, 26, 3.51, 0, 0 },{ 0, 0, 0, 0, 26, 3.51 },{ 27, 3.78, 0, 0, 0, 0 },{ 0, 0, 27, 3.78, 0, 0 },{ 0, 0, 0, 0, 27, 3.78 },{ 28, 4.06, 0, 0, 0, 0 },{ 0, 0, 28, 4.06, 0, 0 },{ 0, 0, 0, 0, 28, 4.06 },{ 29, 4.35, 0, 0, 0, 0 },{ 0, 0, 29, 4.35, 0, 0 },{ 0, 0, 0, 0, 29, 4.35 },{ 30, 4.65, 0, 0, 0, 0 },{ 0, 0, 30, 4.65, 0, 0 },{ 0, 0, 0, 0, 30, 4.65 } };
double IqC[90][3] = { { 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 },{ 1, 0, 0 },{ 0, 1, 0 },{ 0, 0, 1 } };
double WyG[90][3] = { { 0.0098291, 0, 0 },{ 0, 0.0098051, 0 },{ 0, 0, 0.022028 },{ 0.039316, 0, 0 },{ 0, 0.039221, 0 },{ 0, 0, 0.088113 },{ 0.088461, 0, 0 },{ 0, 0.088246, 0 },{ 0, 0, 0.19825 },{ 0.15726, 0, 0 },{ 0, 0.15688, 0 },{ 0, 0, 0.35245 },{ 0.24573, 0, 0 },{ 0, 0.24513, 0 },{ 0, 0, 0.55071 },{ 0.35385, 0, 0 },{ 0, 0.35299, 0 },{ 0, 0, 0.79302 },{ 0.48162, 0, 0 },{ 0, 0.48045, 0 },{ 0, 0, 1.0794 },{ 0.62906, 0, 0 },{ 0, 0.62753, 0 },{ 0, 0, 1.4098 },{ 0.79615, 0, 0 },{ 0, 0.79422, 0 },{ 0, 0, 1.7843 },{ 0.98291, 0, 0 },{ 0, 0.98051, 0 },{ 0, 0, 2.2028 },{ 1.1893, 0, 0 },{ 0, 1.1864, 0 },{ 0, 0, 2.6654 },{ 1.4154, 0, 0 },{ 0, 1.4119, 0 },{ 0, 0, 3.1721 },{ 1.6611, 0, 0 },{ 0, 1.6571, 0 },{ 0, 0, 3.7228 },{ 1.9265, 0, 0 },{ 0, 1.9218, 0 },{ 0, 0, 4.3175 },{ 2.2115, 0, 0 },{ 0, 2.2062, 0 },{ 0, 0, 4.9564 },{ 2.5162, 0, 0 },{ 0, 2.5101, 0 },{ 0, 0, 5.6392 },{ 2.8406, 0, 0 },{ 0, 2.8337, 0 },{ 0, 0, 6.3662 },{ 3.1846, 0, 0 },{ 0, 3.1769, 0 },{ 0, 0, 7.1372 },{ 3.5483, 0, 0 },{ 0, 3.5397, 0 },{ 0, 0, 7.9522 },{ 3.9316, 0, 0 },{ 0, 3.9221, 0 },{ 0, 0, 8.8113 },{ 4.3346, 0, 0 },{ 0, 4.3241, 0 },{ 0, 0, 9.7145 },{ 4.7573, 0, 0 },{ 0, 4.7457, 0 },{ 0, 0, 10.662 },{ 5.1996, 0, 0 },{ 0, 5.1869, 0 },{ 0, 0, 11.653 },{ 5.6615, 0, 0 },{ 0, 5.6478, 0 },{ 0, 0, 12.688 },{ 6.1432, 0, 0 },{ 0, 6.1282, 0 },{ 0, 0, 13.768 },{ 6.6444, 0, 0 },{ 0, 6.6283, 0 },{ 0, 0, 14.891 },{ 7.1654, 0, 0 },{ 0, 7.148, 0 },{ 0, 0, 16.059 },{ 7.706, 0, 0 },{ 0, 7.6872, 0 },{ 0, 0, 17.27 },{ 8.2662, 0, 0 },{ 0, 8.2461, 0 },{ 0, 0, 18.526 },{ 8.8461, 0, 0 },{ 0, 8.8246, 0 },{ 0, 0, 19.825 } };
double R[90][1];
double F[90][1];
double temp1[90][1], temp2[90][1], temp3[1][90], temp4[1][3];

// Pointer declarations
double **_f		= ptrAlloc(3, 1, f);
double **_dx	= ptrAlloc(6, 1, dx);
double **_y		= ptrAlloc(6, 1, y);
double **_IqTnQ = ptrAlloc(90, 6, IqTnQ);
double **_IqC	= ptrAlloc(90, 3, IqC);
double **_WyG	= ptrAlloc(90, 3, WyG);
double **_R		= ptrAlloc(90, 1, R);
double **_F		= ptrAlloc(90, 1, F);
double **_temp1 = ptrAlloc(90, 1, temp1);
double **_temp2 = ptrAlloc(90, 1, temp2);
double **_temp3 = ptrAlloc(1, 90, temp3);
double **_temp4 = ptrAlloc(1, 3, temp4);
  
void calculate_f()
{
	// F
	Mmultiply(_IqTnQ, _dx, 90, 3, 3, 1, _temp1);
	Mmultiply(_IqC, _y, 90, 3, 3, 1, _temp2);
	Madd(_temp1, _temp2,90, 1, _F);

	// R
	for (int i = 0; i < 30; i += 3)
	{
		R[i][1] = rollTarget;
		R[i + 1][1] = pitchTarget;
		R[i + 2][1] = yawTarget;
	}

	// f
	Msubtract(_F, _R, 90, 1, _temp1);
	Mtranspose(_temp1, 90, 1, _temp3);
	Mmultiply(_temp3, _WyG, 1, 90, 90, 3, _temp4);
	MmultiplyScalar(_temp4, 1, 2, 2, _f);
}

int main()
{
	double ftemp[3];
	ftemp[0] = f[0][0];
	ftemp[1] = f[1][0];
	ftemp[2] = f[2][0];

	calculate_f();
	solve(&*ftemp);
	system("pause");
	return 0;
}

